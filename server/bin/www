#!/usr/bin/env node

/**
 * Module dependencies.
 */
const sqlite3 = require('sqlite3').verbose();

var GameLogic = require('../public/javascripts/gameLogic');
var gameLogic = new GameLogic();
var app = require('../app');
var debug = require('debug')('chatdemo:server');
var http = require('http');

var users = [];

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

io.on('connection', function(socket){
  console.log('a user connected');

  /************** HIGHSCORE *****************/
  socket.on('highscore', function(){
    // open the database
    let db = new sqlite3.Database('./towerDefender.db', sqlite3.OPEN_READWRITE, (err) => {
      if (err) {
        console.error(err.message);
      }
      console.log('Connected to the database.');
    });

    db.serialize(() => {
      db.all(`SELECT UserName,Score FROM Player ORDER BY Score DESC LIMIT 5`, (err, row) => {
        if (err) {
          console.error(err.message);
        }
        io.to(socket.id).emit('Highscores', row);
      });  
    });
    
    db.close((err) => {
      if (err) {
        console.error(err.message);
      }
      console.log('Close the database connection.');
    });
  });

  /************** GAME LOGIC ****************/
  /*
    socket.on('test', function(msg){
      //gameLogic.sendEnemies();
      console.log("hmmmmmmmmmmmmmmmmmmmm");
    });
  */
  socket.on('connected', function(msg){
    console.log('message: ' + msg);
  });

  socket.on('play', function(msg){
    console.log("play" + " " + msg.name + " " + users.length);
    users.push({id: socket.id, name: msg.name, xp: msg.xp});
    console.log("users: " + JSON.stringify(users));

    if(users.length > 2){
      io.emit('Wait', msg.name); 

    }else if (users.length > 1){ //for later is 1 
      console.log ("Let's Play!!!!");
      io.to(users[0].id).emit('Play');
      io.to(users[1].id).emit('Play'); //for later
      gameLogic = new GameLogic();
    }
  });

  socket.on('ready', function(){
    console.log("Players are in!!!")
    if (gameLogic.readyToPlay(socket.id)){
      io.emit('SendEnemy', []);
    }
  });
  
  socket.on('lost', function(score){

    if(gameLogic.isAPlayer(socket.id)){   

      var result = users.filter(function (val) {
        return val.id === socket.id;
      });
      
      // open a database connection
      let db = new sqlite3.Database('./towerDefender.db');

      let data = [result[0].name, result[0].name, score];
      let sql = `REPLACE INTO Player (PlayerId, UserName, Score)
                  VALUES (
                    (SELECT PlayerId from Player WHERE UserName = ?),
                    ?,
                    ?
                  )`;

      db.run(sql, data, function(err) {
        if (err) {
          return console.error(err.message);
        }
        console.log(`Row(s) updated: ${this.changes}`);
      });

      // close the database connection
      db.close();
    }
    io.to(socket.id).emit('disconnect');
  })

  socket.on('enemyKilled', function(msg){
    socket.broadcast.emit("EnemyKilled", msg);  
    var result = users.filter(function (val) {
      return val.id === socket.id;
    });
    console.log("Enemy was killed by ", result[0].name);  
  });

  socket.on('sendEnemy', function(){
    console.log("Sending Enemies...")

    if (gameLogic.playing){
      var setIter = gameLogic.toPlay.values();
      var firstSocket = setIter.next().value;

      console.log(firstSocket + " " + socket.id);
      if (firstSocket === socket.id){
        console.log("entered here");
        var enemies = gameLogic.sendEnemies();
        /* improved code */
        var setId = gameLogic.toPlay.values();
        io.to(setId.next().value).emit('SendEnemy', enemies);
        io.to(setId.next().value).emit('SendEnemy', enemies);
        
        //io.emit('SendEnemy', enemies);
      }
    }
  });

  socket.on('disconnect', function(){
    console.log('user disconnected');
    // need to improve
    if(gameLogic.areAllPlayerDead(socket.id)){
      gameLogic.playing = false;
      users.splice(0, 2); //for later is 2
    }
    console.log(users);
  });
  
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
